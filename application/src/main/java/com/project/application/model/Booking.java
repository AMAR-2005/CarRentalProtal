package com.project.application.model;import com.fasterxml.jackson.annotation.*;import jakarta.persistence.*;import jakarta.validation.constraints.FutureOrPresent;import jakarta.validation.constraints.NotNull;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import java.time.LocalDate;@Entity@Data@AllArgsConstructor@NoArgsConstructorpublic class Booking {    @Id    @GeneratedValue(strategy = GenerationType.SEQUENCE,generator = "booking_id")    @SequenceGenerator(name = "booking_id",allocationSize = 1)    private int id;    @ManyToOne    @JoinColumn(name = "user_id", nullable = false)    @JsonIgnoreProperties("bookings")    private User user;    @NotNull(message = "Start date is required")    private LocalDate startDate;    @NotNull(message = "End date is required")    @FutureOrPresent(message = "End date must be in the future or today")    private LocalDate endDate;    private double totalAmount;    private boolean insuranceIncluded;    @ManyToOne    @JoinColumn(name = "vehicle_id", nullable = false)    @JsonIgnoreProperties({"bookings", "rentalCompany"})    private Vehicle vehicle;    @OneToOne(mappedBy = "booking", cascade = CascadeType.ALL, orphanRemoval = true)    @JsonIgnoreProperties("booking")    private Payment payment;}